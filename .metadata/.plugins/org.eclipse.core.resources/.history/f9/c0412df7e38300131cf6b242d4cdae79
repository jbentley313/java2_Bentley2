package com.jbentley.sportsheadlines;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.TimeZone;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.jbentley.connectivityPackage.connectivityClass;
import coml.jbentley.utils.FileManager;

import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivityFragment extends Fragment implements OnClickListener, OnItemClickListener {
	
	Button refreshBtn;
	Button searchBtn;
	ListView listview;
	connectivityClass connectionCheck;
	private TextView resultText;
	EditText searchTxt;
	Context mContext;
	ArrayList<HashMap<String, String>>  mylist;
	 String Tag ="MainFrag";
	 FileManager fileManager;
	 String filename = "headlineFile";
	public interface pubMethods {
		void startDownlIntent();
		
	}
	
	private pubMethods parentActivity;
	
	@Override
	public void onAttach(Activity activity) {
		// TODO Auto-generated method stub
		super.onAttach(activity);
		Log.i("MAINfrag", "onAttatch");
		if (activity instanceof pubMethods) {
			parentActivity = (pubMethods) activity;
		}
		else {
			throw new ClassCastException(activity.toString() + " must implement pubMethods!!");
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		Log.i("MAINACT", "FRAGMENT!!");
		// TODO Auto-generated method stub
		View view = inflater.inflate(R.layout.activity_main, container);
		
		refreshBtn = (Button) view.findViewById(R.id.refreshBtn);
		searchBtn = (Button) view.findViewById(R.id.searchButton);
		
		refreshBtn.setOnClickListener(this);
		searchBtn.setOnClickListener(this);
		
		listview = (ListView) view.findViewById(R.id.list);
		View list_header = inflater.inflate(R.layout.list_header, null);
		listview.addHeaderView(list_header);
//		listview.setOnItemClickListener(this);
		connectionCheck = new connectivityClass();

		resultText = (TextView) view.findViewById(R.id.resultTextView);

		searchTxt = (EditText) view.findViewById(R.id.searchTxt);
		connectionCheck = new connectivityClass();

		


//		mContext = this;


		
		fileManager = FileManager.getInstance();
		if (savedInstanceState != null) {
			Log.i("SIS", "In Saved Instance");
			//			Toast.makeText(mContext, "THERE IS A SAVED INSTANCE!",
			//					Toast.LENGTH_SHORT).show();
			mylist = (ArrayList<HashMap< String, String>>) savedInstanceState
					.getSerializable("saved");

			

			parentActivity.startDownlIntent();

			if (mylist != null) {

				// adapter to display saved serialized data on the listview
				SimpleAdapter adapter = new SimpleAdapter(getActivity().getApplicationContext(), mylist, R.layout.list_row, new String[] 
						{"headline", "lastMod"}, new int[]{R.id.headline, R.id.dateMod });

				listview.setAdapter(adapter);

			} else {
				Log.d("MAIN", "myList is Null");
			}


		} else {
			// if there is no saved instance, go get data and display it
			fileManager = FileManager.getInstance();
			parentActivity.startDownlIntent();

		}
		return view;
	}
		
		
	

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.refreshBtn:
			Log.i("REFRESHbtn", "BUTTON from fragment");
			parentActivity.startDownlIntent();
			break;

		case R.id.searchButton:
			Log.i("SEARCHbtn", "BUTTON from fragment");

			displayData();

			break;
		}
	}


	/**
	 * Display data displays the saved data from storage
	 */
	public void displayData() {

		Log.i(Tag, "displayData called");
		mylist = new ArrayList<HashMap<String,String>>();
		String passedSearchString =  searchTxt.getText().toString();


		File file = view.getFileStreamPath(filename);
		if(file.exists()) {
			String JSONString = FileManager.readStringFile(getApplicationContext(), filename);
			//		connectivityClass connectionCheck = new connectivityClass();


			JSONObject job = null;
			JSONArray feed = null;
			String formattedDate = null;
			try {
				job = new JSONObject(JSONString);
				feed = job.getJSONArray("feed");
				int feedSize = feed.length();
				resultText.setText("Displaying " + String.valueOf(feedSize) + " headlines");

				//loop through saved data and display
				for (int i = 0; i < feedSize; i++) {
					JSONObject feedObject = feed.getJSONObject(i);
					String headline = feedObject.getString("headline");
					String lastMod = feedObject.getString("lastModified");
					String description = feedObject.getString("description");
					JSONObject links = feedObject.getJSONObject("links");
					String moreLinks = links.getString("web");


					//date pattern for passed date
					SimpleDateFormat originalDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);

					//get timezone
					originalDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
					Date date = null;

					//parse passed date and then format it
					try {
						date = originalDateFormat.parse(lastMod);
						formattedDate = new SimpleDateFormat("E' at 'h:mm a " , Locale.US).format(date);
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					//if no search text is entered, display all
					if (passedSearchString.equalsIgnoreCase("")) {
						//						Toast.makeText(mContext, "PASSEDSEARCH NULL", Toast.LENGTH_SHORT).show();
						//hashmap for listview
						HashMap<String, String> displayMap = new HashMap<String, String>();
						displayMap.put("description", description);

						displayMap.put("headline", headline);

						displayMap.put("lastMod", formattedDate);

						displayMap.put("links", moreLinks);



						//add displayMap to mylist
						mylist.add(displayMap);
					}

					//if there is text entered in search text, only display matching headlines
					else if (headline.toLowerCase().contains(passedSearchString.toLowerCase())){
						int listLength = (mylist.size() + 1);
						String listLengthText = Integer.toString(listLength);
						resultText.setText("Displaying " + listLengthText + " headlines");

						HashMap<String, String> displayMap = new HashMap<String, String>();
						displayMap.put("description", description);

						displayMap.put("headline", headline);

						displayMap.put("lastMod", formattedDate);

						displayMap.put("links", moreLinks);



						//add displayMap to mylist
						mylist.add(displayMap);

					}

				}

				searchTxt.setText("");

				//if displayData() returns a blank list, call displayData again with searchtext cleared
				if (mylist.isEmpty()) {
					Toast.makeText(mContext, "No Headlines contain " + passedSearchString, Toast.LENGTH_SHORT).show();
					searchTxt.setText("");
					displayData();
				}

				//adapter to display
				SimpleAdapter adapter = new SimpleAdapter(this, mylist, R.layout.list_row, new String[] 
						{"headline", "lastMod"}, new int[]{R.id.headline, R.id.dateMod });

				listview.setAdapter(adapter);

			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				Log.e("ERROR", e.getMessage().toString());
			}
			// Connection checker to notify user of no connection when displaying saved data
			if (!connectionCheck.connectionStatus(mContext)){
				Toast.makeText(mContext, "No network connection detected!", Toast.LENGTH_LONG).show();
			}
		} 
	}
	
	
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		// TODO Auto-generated method stub
		
	}
	
}
