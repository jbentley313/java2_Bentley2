/*
 * project sportsHeadlines
 * 
 * package com.jbentley.sportsheadlines
 * 
 * @author Jason Bentley
 * 
 * date Jan 13, 2014
 */
package com.jbentley.sportsheadlines;


import java.io.File;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.TimeZone;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Messenger;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;
import android.app.Activity;
import android.app.DialogFragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Context;
import android.content.Intent;
import com.jbentley.sportsheadlines.HeadlineDownloadService;
import coml.jbentley.utils.FileManager;
import com.jbentley.connectivityPackage.connectivityClass;

// TODO: Auto-generated Javadoc
/**
 * The Class MainActivity.
 */
public class MainActivity extends Activity implements  OnItemClickListener, MainActivityFragment.pubMethods {
	static  String Tag = "MAINACTIVITY";
	private TextView resultText;
	FileManager fileManager;
	String filename = "headlineFile";
	Context mContext;
	ListView listview;
	connectivityClass connectionCheck;
	Intent downloadIntent;
	Object obj;
	ArrayList<HashMap<String, String>>  mylist;
	//	EditText searchTxt;
	//	String searchString;

	@SuppressWarnings("unchecked")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main_frag);

		connectionCheck = new connectivityClass();

		resultText = (TextView) this.findViewById(R.id.resultTextView);

		//		searchTxt = (EditText) this.findViewById(R.id.searchTxt);


		mContext = this;


		//inflate the listview 
		listview = (ListView) this.findViewById(R.id.list);
		listview.setOnItemClickListener(this);
		fileManager = FileManager.getInstance();
		if (savedInstanceState != null) {
			Log.i("SIS", "In Saved Instance");
			//			Toast.makeText(mContext, "THERE IS A SAVED INSTANCE!",
			//					Toast.LENGTH_SHORT).show();
			mylist = (ArrayList<HashMap< String, String>>) savedInstanceState
					.getSerializable("saved");





			if (mylist != null) {

				// adapter to display saved serialized data on the listview
				SimpleAdapter adapter = new SimpleAdapter(this, mylist, R.layout.list_row, new String[] 
						{"headline", "lastMod"}, new int[]{R.id.headline, R.id.dateMod });

				listview.setAdapter(adapter);

			} else {
				Log.d("MAIN", "myList is Null");
			}


		} else {
			// if there is no saved instance, go get data and display it
			fileManager = FileManager.getInstance();
			startDownlIntent();

		}

	}


	public void startDownlIntent() {
		//messenger for intent
		Messenger headlineDownloadMessenger = new Messenger(headlineDownloadHandler);


		//intent to call HeadlineDownloadService to download headlines
		downloadIntent = new Intent(this, HeadlineDownloadService.class);
		downloadIntent.putExtra(HeadlineDownloadService.MESSENGER_KEY, headlineDownloadMessenger);

		//start the intent
		startService(downloadIntent);
		resultText.setText("Loading...");
	}

	/**
	 * Display data displays the saved data from storage
	 */
	public void displayData() {

		Log.i(Tag, "displayData called");
		mylist = new ArrayList<HashMap<String,String>>();
		//		String passedSearchString =  searchTxt.getText().toString();


		File file = this.getFileStreamPath(filename);
		if(file.exists()) {
			String JSONString = FileManager.readStringFile(getApplicationContext(), filename);
			//		connectivityClass connectionCheck = new connectivityClass();


			JSONObject job = null;
			JSONArray feed = null;
			String formattedDate = null;
			try {
				job = new JSONObject(JSONString);
				feed = job.getJSONArray("feed");
				int feedSize = feed.length();
				resultText.setText("Displaying " + String.valueOf(feedSize) + " headlines");

				//loop through saved data and display
				for (int i = 0; i < feedSize; i++) {
					JSONObject feedObject = feed.getJSONObject(i);
					String headline = feedObject.getString("headline");
					String lastMod = feedObject.getString("lastModified");
					String description = feedObject.getString("description");
					JSONObject links = feedObject.getJSONObject("links");
					String moreLinks = links.getString("web");


					//date pattern for passed date
					SimpleDateFormat originalDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);

					//get timezone
					originalDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
					Date date = null;

					//parse passed date and then format it
					try {
						date = originalDateFormat.parse(lastMod);
						formattedDate = new SimpleDateFormat("E' at 'h:mm a " , Locale.US).format(date);
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					String passedSearchString = "";
					
					//if no search text is entered, display all
					if (passedSearchString.equalsIgnoreCase("")) {
						//						Toast.makeText(mContext, "PASSEDSEARCH NULL", Toast.LENGTH_SHORT).show();
						//hashmap for listview
						HashMap<String, String> displayMap = new HashMap<String, String>();
						displayMap.put("description", description);

						displayMap.put("headline", headline);

						displayMap.put("lastMod", formattedDate);

						displayMap.put("links", moreLinks);



						//add displayMap to mylist
						mylist.add(displayMap);
					}

					//if there is text entered in search text, only display matching headlines
					else if (headline.toLowerCase().contains(passedSearchString.toLowerCase())){
						int listLength = (mylist.size() + 1);
						String listLengthText = Integer.toString(listLength);
						resultText.setText("Displaying " + listLengthText + " headlines");

						HashMap<String, String> displayMap = new HashMap<String, String>();
						displayMap.put("description", description);

						displayMap.put("headline", headline);

						displayMap.put("lastMod", formattedDate);

						displayMap.put("links", moreLinks);



						//add displayMap to mylist
						mylist.add(displayMap);

					}

				}

				//				searchTxt.setText("");
				//
				//				//if displayData() returns a blank list, call displayData again with searchtext cleared
				//				if (mylist.isEmpty()) {
				//					Toast.makeText(mContext, "No Headlines contain " + passedSearchString, Toast.LENGTH_SHORT).show();
				//					searchTxt.setText("");
				//					displayData();
				//				}

				//adapter to display
				SimpleAdapter adapter = new SimpleAdapter(this, mylist, R.layout.list_row, new String[] 
						{"headline", "lastMod"}, new int[]{R.id.headline, R.id.dateMod });

				listview.setAdapter(adapter);

			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				Log.e("ERROR", e.getMessage().toString());
			}
			// Connection checker to notify user of no connection when displaying saved data
			if (!connectionCheck.connectionStatus(mContext)){
				Toast.makeText(mContext, "No network connection detected!", Toast.LENGTH_LONG).show();
			}
		} 
	}



	//listview onItemClick
	public void onItemClick(AdapterView<?> arg0, View arg1, int position,
			long arg3) {
		// TODO Auto-generated method stub
		if (position !=0){
			obj = arg0.getItemAtPosition(position);

			int itemPos = ((position)-1);
			String itemStrg = Integer.toString(itemPos);
			Log.i(Tag, itemStrg);



			String value= obj.toString();

			Log.i("has", value);

			Intent headlineIntent = new Intent(this, HeadlineActivity.class);
			headlineIntent.putExtra("headlineObject",  value);

			startActivityForResult(headlineIntent, 0);
		}
	}

	public void onNothingSelected(AdapterView<?> arg0) {
		// TODO Auto-generated method stub

	}

	//handler for headlinedownload service
	Handler headlineDownloadHandler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			Log.i(Tag, "handleMessage called");

			String response = null;


			if (msg.arg1 == RESULT_OK && msg.obj != null)
			{

				try {
					response = (String) msg.obj;
					if (connectionCheck.connectionStatus(mContext)){

						//save data then display here
						fileManager.writeStringFile(mContext, filename, response);
					}
					resultText.setText("Nothing to display, check network connection");
					displayData();
				} 
				catch (Exception e) 
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
					Log.e("handleMessage", e.getMessage().toString());

				}
			}
		}
	};

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);

		if (mylist != null && !mylist.isEmpty()) {
			outState.putSerializable("saved", (Serializable) mylist);
			Log.i("SAVE INSTANCE", "Saving Instance State data");

		}
	}

	//activity result to get data from HeadlineActivity
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == RESULT_OK && requestCode == 0) {
			Bundle result = data.getExtras();
			Log.i("RES", result.toString());
			Object passedFromHLActivity = result.get("keyA");
			Log.i("DescMain", passedFromHLActivity.toString());

			Toast.makeText(mContext, "Just read headline: " + passedFromHLActivity, Toast.LENGTH_SHORT).show();

		}
	}

	public void displayDialogFrag() {
		Log.i("SDDSDSDSDSDS", "ZZZZZZZZ");
		FragmentManager fragmentManager = getFragmentManager();
		FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
		MyDialogFragment myDFragment = new MyDialogFragment();
		fragmentTransaction.add(R.id.act_main_frag, myDFragment);
		fragmentTransaction.commit();
		
	}



}
